From ebce1b9dd9fa6878cda5ab3348ad088105e24d35 Mon Sep 17 00:00:00 2001
From: neptuneresearch <neptuneresearch@protonmail.com>
Date: Mon, 19 Oct 2020 02:41:06 +0000
Subject: [PATCH] monerod-archive v17

---
 src/cryptonote_core/blockchain.cpp      | 177 +++++++++++++++++++++++-
 src/cryptonote_core/blockchain.h        |  26 +++-
 src/cryptonote_core/cryptonote_core.cpp |  13 +-
 3 files changed, 210 insertions(+), 6 deletions(-)

diff --git a/src/cryptonote_core/blockchain.cpp b/src/cryptonote_core/blockchain.cpp
index 93e3ef3bc..bc8e87ea3 100644
--- a/src/cryptonote_core/blockchain.cpp
+++ b/src/cryptonote_core/blockchain.cpp
@@ -27,6 +27,9 @@
 // THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 //
 // Parts of this file are originally copyright (c) 2012-2013 The Cryptonote developers
+//
+// ** Patched with MonerodArchive v17 by Neptune Research
+// ** SPDX-License-Identifier: BSD-3-Clause
 
 #include <algorithm>
 #include <cstdio>
@@ -58,6 +61,8 @@
 #include "common/varint.h"
 #include "common/pruning.h"
 
+#include <chrono> // MonerodArchive Dependency #1
+
 #undef MONERO_DEFAULT_LOG_CATEGORY
 #define MONERO_DEFAULT_LOG_CATEGORY "blockchain"
 
@@ -345,7 +350,9 @@ bool Blockchain::init(BlockchainDB* db, const network_type nettype, bool offline
     block_verification_context bvc = {};
     generate_genesis_block(bl, get_config(m_nettype).GENESIS_TX, get_config(m_nettype).GENESIS_NONCE);
     db_wtxn_guard wtxn_guard(m_db);
-    add_new_block(bl, bvc);
+    // <MonerodArchive (IsNodeSynced?3)>
+    add_new_block(bl, bvc, std::make_pair(0, 0));
+    // </MonerodArchive>
     CHECK_AND_ASSERT_MES(!bvc.m_verifivation_failed, false, "Failed to add genesis block to blockchain");
   }
   // TODO: if blockchain load successful, verify blockchain against both
@@ -664,7 +671,9 @@ bool Blockchain::reset_and_set_genesis_block(const block& b)
 
   db_wtxn_guard wtxn_guard(m_db);
   block_verification_context bvc = {};
-  add_new_block(b, bvc);
+  // <MonerodArchive (IsNodeSynced?4)>
+  add_new_block(b, bvc, std::make_pair(0, 0));
+  // </MonerodArchive>
   if (!update_next_cumulative_weight_limit())
     return false;
   return bvc.m_added_to_main_chain && !bvc.m_verifivation_failed;
@@ -4482,7 +4491,7 @@ bool Blockchain::update_next_cumulative_weight_limit(uint64_t *long_term_effecti
   return true;
 }
 //------------------------------------------------------------------
-bool Blockchain::add_new_block(const block& bl, block_verification_context& bvc)
+bool Blockchain::add_new_block(const block& bl, block_verification_context& bvc, std::pair<uint64_t,uint64_t> archive_sync_state)
 {
   try
   {
@@ -4500,9 +4509,17 @@ bool Blockchain::add_new_block(const block& bl, block_verification_context& bvc)
     return false;
   }
 
+  // <MonerodArchive (All Blocks)>
+  block& bl_archive = const_cast<block&>(bl);
+  // <MonerodArchive (All Blocks)>
+
   //check that block refers to chain tail
   if(!(bl.prev_id == get_tail_id()))
   {
+    // <MonerodArchive (Alt Block)>
+    archive_block(bl_archive, true, archive_sync_state);
+    // </MonerodArchive (Alt Block)>
+
     //chain switching or wrong block
     bvc.m_added_to_main_chain = false;
     rtxn_guard.stop();
@@ -4511,6 +4528,12 @@ bool Blockchain::add_new_block(const block& bl, block_verification_context& bvc)
     return r;
     //never relay alternative blocks
   }
+  // <MonerodArchive (Main Block)>
+  else
+  {
+    archive_block(bl_archive, false, archive_sync_state);
+  }
+  // </MonerodArchive (Main Block)>
 
   rtxn_guard.stop();
   return handle_block_to_main_chain(bl, id, bvc);
@@ -4524,6 +4547,154 @@ bool Blockchain::add_new_block(const block& bl, block_verification_context& bvc)
   }
 }
 //------------------------------------------------------------------
+/*
+  <MonerodArchive>
+ */
+void Blockchain::archive_block(block& b, bool is_alt_block, std::pair<uint64_t,uint64_t> archive_sync_state)
+{
+  // ## read archive configuration
+  std::string filename_archive = archive_output_filename();
+  std::string output_field_delimiter = "\t";
+  uint64_t archive_version = 11;
+
+  // ## alt_chain_info
+  std::pair<uint64_t,std::string> altchaininfo = archive_alt_chain_info();
+  uint64_t altchaininfo_length = altchaininfo.first;
+  std::string altchaininfo_json = altchaininfo.second;
+
+  // ## sync state
+  uint64_t archive_current_height = archive_sync_state.first;
+  uint64_t archive_target_height = archive_sync_state.second;
+  bool is_node_synced = (archive_current_height >= archive_target_height);
+
+  // ## get data from block
+  // block height: miner_tx => txin_v transaction.vin => txin_v[0] => txin_v.txin_gen => txin_gen.height
+  size_t block_height = boost::get<txin_gen>(b.miner_tx.vin[0]).height;
+  // block timestamp (MRT)
+  uint64_t block_timestamp = b.timestamp;
+  // node_timestamp (NRT)
+  uint64_t node_timestamp = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
+
+  // ## OUTPUT - Daemon console
+  std::stringstream patch_log;
+  patch_log << "Block Archive"
+            << (is_alt_block ? " ALT " : " MAIN")
+            << " H=" << block_height
+            << " MRT=" << block_timestamp
+            << " NRT=" << node_timestamp
+            << " n_alt_chains=" << altchaininfo_length
+            << (is_node_synced ? " FULL" : " SYNC")
+            << " NCH=" << archive_current_height
+            << " NTH=" << archive_target_height;
+  MCLOG_MAGENTA(el::Level::Info, "global", patch_log.str());
+
+  // ## OUTPUT - Filesystem recording
+  // ### serialize block
+  std::ostringstream block_json_buf;
+  // note: second argument to json_archive() is bool indent
+  json_archive<true> block_json(block_json_buf, false);
+  bool block_json_success = ::serialization::serialize(block_json, b);
+
+  // ### make archive line
+  std::stringstream archive_line;
+  // note: string << int required for int to string conversion
+  archive_line << "" << archive_version // 1
+               << output_field_delimiter
+               << node_timestamp   // 2
+               << output_field_delimiter
+               << (is_alt_block ? "1" : "0") // 3
+               << output_field_delimiter;
+  archive_line << (block_json_success ? block_json_buf.str() : "{}"); // 4
+  archive_line << output_field_delimiter
+               << altchaininfo_length  // 5
+               << output_field_delimiter
+               << altchaininfo_json  // 6
+               << output_field_delimiter
+               << (is_node_synced ? "1" : "0") // 7
+               << output_field_delimiter
+               << archive_current_height // 8
+               << output_field_delimiter
+               << archive_target_height  // 9
+               << "\n";
+
+  bool save_success = epee::file_io_utils::append_string_to_file(filename_archive, archive_line.str());
+}
+//-----------------------------------------------------------------------------------------------
+std::pair<uint64_t,std::string> Blockchain::archive_alt_chain_info()
+{
+  // rpc_get_info: read height_without_bootstrap
+  uint64_t height_without_bootstrap;
+  get_tail_id(height_without_bootstrap);
+  ++height_without_bootstrap; // turn top block height into blockchain height
+
+  // rpc_get_alternate_chains
+  std::vector<std::pair<block_extended_info,std::vector<crypto::hash>>> chains = get_alternative_chains();
+
+  uint64_t altchains_length = boost::lexical_cast<uint64_t>(chains.size());
+
+  // serialize altchains
+  std::stringstream altchains_json;
+  if(altchains_length > 0)
+  {
+    //  root array start
+    altchains_json << "[";
+
+    //  each altchain
+    bool firstchain = false;
+    for (const auto &chain: chains)
+    {
+      uint64_t length = chain.second.size();
+      uint64_t start_height = (chain.first.height - length + 1);
+      uint64_t deep = (height_without_bootstrap - start_height - 1);
+      std::string block_hash = epee::string_tools::pod_to_hex(get_block_hash(chain.first.bl));
+
+      // n > 1 : add array delimiter
+      if(!firstchain)
+      {
+        firstchain = true;
+      }
+      else
+      {
+        altchains_json << ",";
+      }
+      // serialize chain
+      altchains_json << "{"
+                     << "\"length\"" << ":" << length << ","
+                     << "\"height\"" << ":" << start_height << ","
+                     << "\"deep\""   << ":" << deep << ","
+                     << "\"diff\""   << ":" << chain.first.cumulative_difficulty << ","
+                     << "\"hash\""   << ":" << "\"" << block_hash << "\""
+                     << "}";
+    }
+
+    //  root array end
+    altchains_json << "]";
+  }
+  else
+  {
+    // root array empty
+    altchains_json << "[]";
+  }
+
+  return std::make_pair(altchains_length, altchains_json.str());
+}
+//-----------------------------------------------------------------------------------------------
+std::string Blockchain::archive_output_filename()
+{
+  // ## USER INPUT
+  // # output_filename
+  // # - Directory MUST exist, it will not be created.
+  std::string output_filename;
+
+  // # Linux flavor
+  output_filename = "/opt/monerodarchive/archive.log";
+
+  return output_filename;
+}
+/*
+  </MonerodArchive>
+ */
+//------------------------------------------------------------------
 //TODO: Refactor, consider returning a failure height and letting
 //      caller decide course of action.
 void Blockchain::check_against_checkpoints(const checkpoints& points, bool enforce)
diff --git a/src/cryptonote_core/blockchain.h b/src/cryptonote_core/blockchain.h
index a9b7ca1da..c90a52877 100644
--- a/src/cryptonote_core/blockchain.h
+++ b/src/cryptonote_core/blockchain.h
@@ -27,6 +27,9 @@
 // THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 //
 // Parts of this file are originally copyright (c) 2012-2013 The Cryptonote developers
+//
+// ** Patched with MonerodArchive v11 by Neptune Research
+// ** SPDX-License-Identifier: BSD-3-Clause
 
 #pragma once
 #include <boost/asio/io_service.hpp>
@@ -329,6 +332,9 @@ namespace cryptonote
      */
     size_t recalculate_difficulties(boost::optional<uint64_t> start_height = boost::none);
 
+    /*
+     * <MonerodArchive>
+     */
     /**
      * @brief adds a block to the blockchain
      *
@@ -342,7 +348,25 @@ namespace cryptonote
      *
      * @return true on successful addition to the blockchain, else false
      */
-    bool add_new_block(const block& bl_, block_verification_context& bvc);
+    bool add_new_block(const block& bl_, block_verification_context& bvc, std::pair<uint64_t,uint64_t> archive_sync_state);
+
+    /**
+     * @copydoc Blockchain::archive_block
+     */
+        void archive_block(block& b, bool is_alt_block, std::pair<uint64_t,uint64_t> archive_sync_state);
+
+    /**
+     * @copydoc Blockchain::archive_alt_chain_info
+     */
+        std::pair<uint64_t,std::string> archive_alt_chain_info();
+
+    /**
+     * @copydoc Blockchain::archive_output_filename
+     */
+        std::string archive_output_filename();
+    /*
+     * </MonerodArchive>
+    */
 
     /**
      * @brief clears the blockchain and starts a new one
diff --git a/src/cryptonote_core/cryptonote_core.cpp b/src/cryptonote_core/cryptonote_core.cpp
index fef411a0c..aa6342ef5 100644
--- a/src/cryptonote_core/cryptonote_core.cpp
+++ b/src/cryptonote_core/cryptonote_core.cpp
@@ -27,6 +27,9 @@
 // THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 //
 // Parts of this file are originally copyright (c) 2012-2013 The Cryptonote developers
+//
+// ** Patched with MonerodArchive v11 by Neptune Research
+// ** SPDX-License-Identifier: BSD-3-Clause
 
 #include <boost/algorithm/string.hpp>
 #include <boost/uuid/nil_generator.hpp>
@@ -1476,7 +1479,10 @@ namespace cryptonote
       m_miner.resume();
       return false;
     }
-    m_blockchain_storage.add_new_block(b, bvc);
+    // <MonerodArchive (IsNodeSynced?1)>
+    std::pair<uint64_t,uint64_t> archive_sync_state = std::make_pair(get_current_blockchain_height(), get_target_blockchain_height());
+    m_blockchain_storage.add_new_block(b, bvc, archive_sync_state);
+    // </MonerodArchive>
     cleanup_handle_incoming_blocks(true);
     //anyway - update miner template
     update_miner_block_template();
@@ -1522,7 +1528,10 @@ namespace cryptonote
   //-----------------------------------------------------------------------------------------------
   bool core::add_new_block(const block& b, block_verification_context& bvc)
   {
-    return m_blockchain_storage.add_new_block(b, bvc);
+    // <MonerodArchive (IsNodeSynced?2)>
+    std::pair<uint64_t,uint64_t> archive_sync_state = std::make_pair(get_current_blockchain_height(), get_target_blockchain_height());
+    return m_blockchain_storage.add_new_block(b, bvc, archive_sync_state);
+    // </MonerodArchive>
   }
 
   //-----------------------------------------------------------------------------------------------
